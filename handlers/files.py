from aiogram import types, Dispatcher
from aiogram.utils.chat_action import ChatActionSender
from config import config
from utils.keyboards import get_subscription_keyboard
import os

async def send_files(message: types.Message):
    try:
        if not os.path.exists(config.FILES_DIR):
            raise FileNotFoundError
        
        files = os.listdir(config.FILES_DIR)
        if not files:
            raise FileNotFoundError

        async with ChatActionSender.upload_document(bot=message.bot, chat_id=message.chat.id):
            for file_name in files:
                file_path = os.path.join(config.FILES_DIR, file_name)
                with open(file_path, "rb") as file:
                    await message.bot.send_document(
                        chat_id=message.chat.id,
                        document=types.BufferedInputFile(file.read(), filename=file_name),
                        caption=f"üìÅ {file_name}"
                    )

        await message.answer("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await message.bot.send_message(config.ADMIN_ID, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –ø—É—Å—Ç–∞!")

async def check_sub_callback(callback: types.CallbackQuery):
    await callback.answer()
    await send_files(callback.message)

def register_files_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–∞–π–ª–æ–≤"""
    dp.callback_query.register(check_sub_callback, lambda c: c.data == "check_sub")

from aiogram import types, Dispatcher
from aiogram.utils.chat_action import ChatActionSender
from config import config
from utils.keyboards import get_subscription_keyboard
from services.subscription_service import check_subscription
import os

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
active_users = set()

async def send_files(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in active_users:
        return
        
    active_users.add(user_id)
    try:
        if not os.path.exists(config.FILES_DIR):
            raise FileNotFoundError
        
        files = os.listdir(config.FILES_DIR)
        if not files:
            raise FileNotFoundError

        async with ChatActionSender.upload_document(bot=message.bot, chat_id=message.chat.id):
            for file_name in files:
                file_path = os.path.join(config.FILES_DIR, file_name)
                with open(file_path, "rb") as file:
                    await message.bot.send_document(
                        chat_id=message.chat.id,
                        document=types.BufferedInputFile(file.read(), filename=file_name),
                        caption=f"üìÅ {file_name}"
                    )
        await message.answer("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await message.bot.send_message(config.ADMIN_ID, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –ø—É—Å—Ç–∞!")
    finally:
        active_users.remove(user_id)

async def check_sub_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π"""
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_subscribed = await check_subscription(callback.bot, callback.from_user.id, config.CHANNEL_ID)
    
    if is_subscribed:
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await callback.message.edit_reply_markup(reply_markup=None)
        await send_files(callback.message)
    else:
        await callback.message.answer(
            "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.",
            reply_markup=get_subscription_keyboard()
        )

def register_files_handlers(dp: Dispatcher):
    dp.callback_query.register(check_sub_callback, lambda c: c.data == "check_sub")